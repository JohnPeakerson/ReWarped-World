# .github/workflows/build-rom.yml

name: Build SM64 Patch

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      # 2. Set up the N64 SDK -- THIS STEP IS REVISED TO FIX THE COMPILER NAME
      - name: Install N64 SDK and create compatibility links
        run: |
          echo "Downloading N64 SDK from ultra64.ca..."
          wget -O n64sdk.7z http://ultra64.ca/files/software/other/sdks/n64sdk.7z
          
          echo "Extracting SDK..."
          7z x n64sdk.7z
          
          # --- THE FIX IS HERE ---
          echo "Creating symbolic links for Makefile compatibility..."
          # Navigate into the toolchain's binary directory
          cd n64sdk/mips64/bin
          # Create links with the names the Makefile expects (mips-linux-gnu-*)
          # that point to the actual tools that exist (mips64-elf-*)
          ln -s mips64-elf-gcc mips-linux-gnu-gcc
          ln -s mips64-elf-g++ mips-linux-gnu-g++
          ln -s mips64-elf-ld mips-linux-gnu-ld
          ln -s mips64-elf-objcopy mips-linux-gnu-objcopy
          # Go back to the project root directory
          cd ../../..
          
          echo "Adding SDK to PATH..."
          echo "$(pwd)/n64sdk/mips64/bin" >> $GITHUB_PATH
        shell: bash

      # 3. Install system dependencies
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            python3 \
            binutils-mips-linux-gnu \
            libaudiofile-dev \
            libpng-dev \
            pkg-config \
            wine \
            p7zip-full \
            unzip

      # 4. Decrypt the Base ROM using the secret password
      - name: Decrypt Base ROM
        run: |
          if [ -z "${{ secrets.ROM_PASSWORD }}" ]; then
            echo "ERROR: The ROM_PASSWORD secret is not set. Please follow the instructions to create it."
            exit 1
          fi
          echo "Decrypting base ROM from baserom.us.7z..."
          7z x -p"${{ secrets.ROM_PASSWORD }}" baserom.us.7z
          echo "Base ROM successfully decrypted."

      # 5. Compile the game
      - name: Compile Super Mario 64 (z64)
        run: |
          make -j$(nproc)

      # 6. Create BPS Patch
      - name: Create BPS Patch
        run: |
          echo "Downloading flips (BPS patch creator)..."
          curl -L -o flips.zip "https://github.com/Alcaro/Flips/releases/download/v1.31/flips-1.31.zip"
          unzip flips.zip
          chmod +x flips-linux
          echo "Creating BPS patch..."
          ./flips-linux --create baserom.us.z64 build/us_libultra/sm64.us.z64 sm64-us-patch.bps
          echo "BPS patch created successfully: sm64-us-patch.bps"

      # 7. Upload the BPS patch as a build artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: sm64-patch-us
          path: sm64-us-patch.bps
